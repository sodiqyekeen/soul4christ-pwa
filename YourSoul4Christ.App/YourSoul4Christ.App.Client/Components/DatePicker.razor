@using System.Globalization
@typeparam TValue
@inherits InputBase<TValue>

<div class="form-group col-3">
   
    @*<select class="form-control" name="day"  id="day" @onchange="GetDay">
        <option value="">Day</option>
        @for (int i = 1; i <= 31; i++)
        {
            <option value="@(i.ToString("00"))">@(i.ToString("00"))</option>
        }
    </select>*@
</div>
<div class="form-group col-4">
    <select class="form-control" name="month"  id="month" @onchange="GetMonth">
        <option value="">Month</option>
        @for (int i = 1; i <= 12; i++)
        {
            <option value="@(i.ToString("00"))">@CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
        }
    </select>
</div>
<div class="form-group col-4">
    <span class="btn" @onclick="SetDateToday">Today</span>
</div>
@*<div class="form-group col-3">
    <select class="form-control" name="year" id="year" @onchange="GetYear">
        <option value="">Year</option>
        @for (int i = DateTime.Now.Year - 100; i <= DateTime.Now.Year; i++)
        {
            <option>@i.ToString()</option>
        }
    </select>
</div>*@



@code {

    private string day;
    private string month;
    private string year = DateTime.Now.Year.ToString();

    private void SetDateToday()
    {
        day = DateTime.Now.Day.ToString();
        month = DateTime.Now.Month.ToString();
    }

    private void GetDay(ChangeEventArgs args)
    {
        day = args.Value.ToString();
        AssignCurrentValue();
    }

    private void GetYear(ChangeEventArgs args)
    {
        year = args.Value.ToString();
        AssignCurrentValue();
    }

    private void AssignCurrentValue()
    {
        if (!string.IsNullOrEmpty(day) && !string.IsNullOrEmpty(month) && !string.IsNullOrEmpty(year))
            CurrentValueAsString = day + "/" + month + "/" + year;
    }

    private void GetMonth(ChangeEventArgs args)
    {
        month = args.Value.ToString();
        AssignCurrentValue();
    }



    protected override bool TryParseValueFromString(string value, out TValue result, out string errorMessage)
    {
        if (!DateTime.TryParse(value, out _))
        {
            result = default;
            errorMessage = $"{FieldIdentifier.FieldName} field isn't valid.";
            return false;
        }
        var success = BindConverter.TryConvertTo<TValue>(value, CultureInfo.CurrentCulture, out var parsedValue);
        if (success)
        {
            result = parsedValue;
            errorMessage = null;

            return true;
        }
        else
        {
            result = default;
            errorMessage = $"{FieldIdentifier.FieldName} field isn't valid.";

            return false;
        }
    }
}