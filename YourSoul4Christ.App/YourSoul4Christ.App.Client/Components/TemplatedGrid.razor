@typeparam TItem
@inject IJSRuntime JSRuntime

@if (items == null)
{
    @Loading
}
else if (!items.Any())
{
    @Empty
}
else
{
    <div class="row row-cols-1 row-cols-md-3">
        @foreach (var item in items)
        {
            <div class="col-md-4 mb-2 t-grid">
                @Item(item)
            </div>
        }
    </div>
    <Pagination Items="items" TITem="TItem" OnChangeIndex="ChangeIndex" />
}

@code {
    [Parameter] public RenderFragment<TItem> Item { get; set; }
    [Parameter] public Func<Task<IQueryable<TItem>>> Loader { get; set; }
    [Parameter] public RenderFragment Loading { get; set; }
    [Parameter] public RenderFragment Empty { get; set; }
    IQueryable<TItem> allItem;
    PaginatedList<TItem> items;
    PagingOptions pagingOptions = new PagingOptions();

    protected override async Task OnParametersSetAsync()
    {
        allItem = await Loader();
        items = PaginatedList<TItem>.Create(allItem, pagingOptions.Index, pagingOptions.Limit);
        await JSRuntime.InvokeVoidAsync("console.log", $"total pages: {items.TotalPages}  current page = {items.CurrentPage}  has next= {items.HasNextPage}  has prev = {items.HasPreviousPage}");
    }

    private async Task ChangeIndex(int index)
    {
        if (index > 0 && index <= items.TotalPages)
        {
            pagingOptions.Index = index;
            items = PaginatedList<TItem>.Create(allItem, index, pagingOptions.Limit);
            await JSRuntime.InvokeVoidAsync("scroll.toTop");
            await JSRuntime.InvokeVoidAsync("console.log", $"total pages: {items.TotalPages}  current page = {items.CurrentPage}  has next= {items.HasNextPage}  has prev = {items.HasPreviousPage}");
        }
    }
}
