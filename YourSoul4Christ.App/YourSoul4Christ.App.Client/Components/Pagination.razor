@typeparam TITem
@inject IJSRuntime JSRuntime

<div class="row">
    @*<div class="col-md-6 float-left"><p>Showing @Items.CurrentPageStartIndex to @Items.CurrentPageLastIndex of @Items.TotalRecords</p></div>*@
    <div class="col">
        <nav aria-label="Navigation">
            <ul class="pagination justify-content-center">
                @if (Items.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" @onclick="Previous" aria-label="Previous">
                            <span aria-hidden="true">&lt;</span>
                        </a>
                    </li>
                }

                @for (int i = 1; i <= Items.TotalPages; i++)
                {
                    int index = i;
                    <li class="page-item @(i == Items.CurrentPage ? "active" : "")">
                        <a class="page-link" href="javaScript:void();" @onclick="@(() => GotoPage(index))">@i</a>
                    </li>
                }

                @if (Items.HasNextPage)
                {
                    <li class="page-item ">
                        <a class="page-link" @onclick="Next" aria-label="Next">
                            <span aria-hidden="true">&gt;</span>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

@code {
    [Parameter] public PaginatedList<TITem> Items { get; set; }
    [Parameter] public EventCallback<int> OnChangeIndex { get; set; }

    private int pageIndex = 1;

    private async Task Previous()
    {
        if (Items.HasPreviousPage)
            await OnChangeIndex.InvokeAsync(--pageIndex);
    }

    private async Task GotoPage(int pageIndex)
    {
        await JSRuntime.InvokeVoidAsync($"console.log", pageIndex);
        await OnChangeIndex.InvokeAsync(pageIndex);
    }
    private async Task Next()
    {
        if (Items.HasNextPage)
            await OnChangeIndex.InvokeAsync(++pageIndex);
    }
}
