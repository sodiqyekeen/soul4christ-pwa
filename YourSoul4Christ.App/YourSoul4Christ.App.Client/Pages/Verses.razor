@page "/verses/{year:int}/{month:int}"

@inject AppService AppService

<TemplatedGrid Loader="LoadVerses">
    <Loading>
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </Loading>
    <Empty>
        <div class="row">
            <p>No verse found.</p>
        </div>
    </Empty>
    <Item Context="item">
        <VerseCard Verse="item" />
    </Item>
</TemplatedGrid>




@code {
    [Parameter] public int Year { get; set; }
    [Parameter] public int Month { get; set; }
    private PagingOptions pagingOptions = new PagingOptions();

    async Task<IQueryable<Verse>> LoadVerses()
    {
        var verses = Enumerable.Empty<Verse>().AsQueryable();
        try
        {
            verses = await AppService.GetVersesByDateAsQueryable(Year, Month);
        }
        catch (Exception e)
        {
            Console.Error.WriteLine(e.Message);
            Console.Error.WriteLine(e.ToString());
        }
        return verses;
    }

    //private async Task GetVerses(LoadVerseForm form)
    //{
    //    isFormSubmitted = true;
    //    verses = (await AppService.GetVerseByDate(form)).ToArray();
    //}

    //private async Task Previous()
    //{
    //    if (verses.HasPreviousPage)
    //    {
    //        pagingOptions.Index -= 1;
    //        verses = await GetVersesAsync(pagingOptions);
    //    }
    //}

    //private async Task ChangeIndex(int index)
    //{
    //    if (index > 0 && index < verses.TotalPages)
    //    {
    //        pagingOptions.Index = index;
    //        verses = await GetVersesAsync(pagingOptions);
    //    }
    //}

    //private async Task Next()
    //{
    //    if (verses.HasNextPage)
    //    {
    //        pagingOptions.Index += 1;
    //        verses = await GetVersesAsync(pagingOptions);
    //    }
    //}

    //private async Task<PaginatedList<Verse>> GetVersesAsync(PagingOptions pagingOptions)
    //    => await AppService.GetPaginatedVersesByDate(pagingOptions, Year, Month);


}
