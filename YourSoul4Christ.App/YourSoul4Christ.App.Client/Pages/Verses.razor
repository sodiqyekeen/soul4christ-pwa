@page "/verses/{year:int}/{month:int}"

@inject AppService AppService

@if (verses == null)
{
    <div style="height:100%;">
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </div>
}
else if (!verses.Any())
{
    <div class="row">
        <p>No record found.</p>
    </div>
}
else
{
    <div class="row">
        <VerseGroup Verses="verses" />
    </div>
}




@code {
    [Parameter] public int Year { get; set; }
    [Parameter] public int Month { get; set; }
    private Verse[] verses;
    //private PaginatedList<Verse> verses;
    //private bool isFormSubmitted = false;
    private PagingOptions pagingOptions = new PagingOptions();


    protected override async Task OnParametersSetAsync()
    {
        try
        {
            verses = (await AppService.GetVerseByDate(Year, Month)).ToArray();
            //verses = await AppService.GetPaginatedVersesByDate(pagingOptions, Year, Month);
        }
        catch (Exception e)
        {
            Console.Error.WriteLine(e.Message);
            Console.Error.WriteLine(e.ToString());
        }
    }

    //private async Task GetVerses(LoadVerseForm form)
    //{
    //    isFormSubmitted = true;
    //    verses = (await AppService.GetVerseByDate(form)).ToArray();
    //}

    //private async Task Previous()
    //{
    //    if (verses.HasPreviousPage)
    //    {
    //        pagingOptions.Index -= 1;
    //        verses = await GetVersesAsync(pagingOptions);
    //    }
    //}

    //private async Task ChangeIndex(int index)
    //{
    //    if (index > 0 && index < verses.TotalPages)
    //    {
    //        pagingOptions.Index = index;
    //        verses = await GetVersesAsync(pagingOptions);
    //    }
    //}

    //private async Task Next()
    //{
    //    if (verses.HasNextPage)
    //    {
    //        pagingOptions.Index += 1;
    //        verses = await GetVersesAsync(pagingOptions);
    //    }
    //}

    //private async Task<PaginatedList<Verse>> GetVersesAsync(PagingOptions pagingOptions)
    //    => await AppService.GetPaginatedVersesByDate(pagingOptions, Year, Month);


}
